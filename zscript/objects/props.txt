// Explosive Barrel
class NTM_ExplosiveBarrel : ExplosiveBarrel replaces ExplosiveBarrel {
	Default {
		Height 28;
		Scale 0.64;
	}
	
	States {
		Spawn:
			NBAR ABCB 6;
			Loop;
		
		Death:
			NBAR D 5 Bright;
			TNT1 A 0 A_NoBlocking;
			TNT1 A 0 A_StartSound("world/barrelx", 5, 0, 1, Attn_Norm, FRandom(0.5, 1.25));
			TNT1 A 0 A_SpawnItemEx("NTM_Explosion2", 0, 0, 20);
			TNT1 A 0 A_SpawnDebris("NTM_BarrelGib");
			
			TNT1 A 0 {
				NTMAi.Explode(self);
			}
			
			TNT1 A 15 A_Quake(2, 15, 0, 512, "");
			TNT1 A 1051 A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			
			Wait;
	}
}

// Barrel Gib
class NTM_BarrelGib : NTM_Gib {
	Default {
		Scale 0.25;
		
		+ForceXYBillboard
	}
	
	States {
		Spawn:
			NBGB ABCDEFGH 3;
			Loop;
	}
}

// Pumpkin
class NTM_Pumpkin : SkullColumn {
	Default {
		Health 10;
		Height 30;
		DeathSound "NTM_Pumpkin/death";
		
		+DontThrust
		+NotAutoAimed
		+NoBlood
		+NoBloodDecals
		+Shootable
		-Solid
	}
	
	States {
		Spawn:
			NPMP A -1;
			Stop;
		
		Death:
			NPMP A 0 A_Scream;
			NPMP A 0 A_SpawnDebris("NTM_PumpkinGib", false, 1.4, 0.7);
			Stop;
	}
}

// Pumpkin Gib
class NTM_PumpkinGib : NTM_Gib {
	Default {
		Health 6;
		Scale 0.5;
		
		+ForceXYBillboard
	}
	
	States {
		Spawn:
			NPMG ABCDEFGH 3;
			Loop;
	}
}

// Glass Shard
class NTM_GlassShard : NTM_Gib {
	Default {
		Health 6;
		Scale 0.625;
		RenderStyle "Add";
		
		+ForceXYBillboard
		+ZDoomTrans
	}
	
	States {
		Spawn:
			NGLG ABCDEFGH 2;
			Loop;
	}
}


// Torch Base
class NTM_TorchBase : Actor {
	class<NTM_FireProp> fireType;
	property FireType: fireType;
	
	double fireHeight;
	property FireHeight: fireHeight;
	
	NTM_FireProp fire;
	
	Default {
		ProjectilePassHeight -16;
		
		+Solid
	}
	
	override void BeginPlay() {
		super.BeginPlay();
		
		if (fireType) {
			bool ok;
			Actor a;
			
			[ok, a] = A_SpawnItemEx(fireType, 0, 0, fireHeight, 0, 0, 0, 0, SXF_NoCheckPosition);
			fire = NTM_FireProp(a);
		}
	}
	
	override void Tick() {
		super.Tick();
		
		if (fire) {
			// GROSS HACK: Offset fire to appear behind the torch
			double ang = angle;
			let p = players[net_arbitrator];
			
			if (p) {
				Actor pcam = p.camera;
				
				if (pcam) {
					ang = AngleTo(pcam, true);
				}
			}
			
			fire.SetOrigin(pos + (-Cos(ang), -Sin(ang), fireHeight), true);
		}
	}
	
	override void OnDestroy() {
		super.OnDestroy();
		
		if (fire) {
			fire.Destroy();
		}
	}
}

// Fire Prop
class NTM_FireProp : Actor {
	Default {
		RenderStyle "Add";
		
		+NoInteraction
		+ZDoomTrans
	}
	
	States {
		Spawn:
			NFIR A 0 NoDelay A_Jump(255, Random(0, 13));
			NFIR ABCDEFGHIJKLMN 2 Bright;
			Goto Spawn + 1;
	}
	
	override void BeginPlay() {
		super.BeginPlay();
		
		A_StartSound("NTM_World/fire", Chan_Body, ChanF_Looping);
	}
}

// Burning Barrel
class NTM_BurningBarrel : NTM_TorchBase {
	Default {
		Radius 16;
		Height 32;
		Scale 0.64;
		NTM_TorchBase.FireType "NTM_BurningBarrelFire";
		NTM_TorchBase.FireHeight 27;
	}
	
	States {
		Spawn:
			NBAR E -1;
			Stop;
	}
}

// Burning Barrel Fire
class NTM_BurningBarrelFire : NTM_FireProp {
	Default {
		Scale 0.5;
		Translation "NTM_Fire_Yellow";
	}
}

// Red Torch
class NTM_RedTorch : NTM_TorchBase {
	Default {
		Radius 16;
		Height 68;
		NTM_TorchBase.FireType "NTM_RedTorchFire";
		NTM_TorchBase.FireHeight 51;
	}
	
	States {
		Spawn:
			NTOR B -1;
			Stop;
	}
}

// Red Torch Fire
class NTM_RedTorchFire : NTM_FireProp {
	Default {
		Scale 0.6;
		Translation "NTM_Fire_Red";
	}
}

// Green Torch
class NTM_GreenTorch : NTM_RedTorch {
	Default {
		NTM_TorchBase.FireType "NTM_GreenTorchFire";
	}
}

// Green Torch Fire
class NTM_GreenTorchFire : NTM_RedTorchFire {
	Default {
		Translation "NTM_Fire_Green";
	}
}

// Blue Torch
class NTM_BlueTorch : NTM_RedTorch {
	Default {
		NTM_TorchBase.FireType "NTM_BlueTorchFire";
	}
}

// Blue Torch Fire
class NTM_BlueTorchFire : NTM_RedTorchFire {
	Default {
		Translation "NTM_Fire_Blue";
	}
}

// Short Red Torch
class NTM_ShortRedTorch : NTM_RedTorch {
	Default {
		Radius 16;
		Height 37;
		NTM_TorchBase.FireHeight 28;
	}
	
	States {
		Spawn:
			NTOR A -1;
			Stop;
	}
}

// Short Green Torch
class NTM_ShortGreenTorch : NTM_ShortRedTorch {
	Default {
		NTM_TorchBase.FireType "NTM_GreenTorchFire";
	}
}

// Short Blue Torch
class NTM_ShortBlueTorch : NTM_ShortRedTorch {
	Default {
		NTM_TorchBase.FireType "NTM_BlueTorchFire";
	}
}

// Gibbed Marine
class NTM_GibbedMarine : Actor {
	Default {
		Health 50;
		
		+DontGib
		+Vulnerable
		-Synchronized
	}
	
	States {
		Spawn:
			NCPS D -1 NoDelay A_Jump(128, 1);
			Stop;
			NCPS E -1;
			Stop;
		
		Death:
			TNT1 A 0 {
				A_StartSound("misc/gibbed");
				
				for (int i; i < Random(5, 8); i++) {
					A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
				}
				
				A_SpawnItemEx("NTM_FlyingGib1", 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
			}
			
			Stop;
	}
	
	override void BeginPlay() {
		super.BeginPlay();
		
		bXFlip = Random(0, 1);
	}
}

class NTM_GibbedMarine2 : NTM_GibbedMarine {}

// Dead Marine
class NTM_DeadMarine : NTM_GibbedMarine {
	Default {
		Health 100;
	}
	
	States {
		Spawn:
			NCPS A -1 NoDelay A_Jump(128, 1);
			Stop;
			NCPS B -1 A_Jump(128, 1);
			Stop;
			NCPS C -1;
			Stop;
	}
}

// Dead Zombieman
class NTM_DeadZombieman : NTM_DeadMarine {
	Default {
		Health 20;
	}
	
	States {
		Spawn:
			NZOM L -1;
			Stop;
	}
}

// Dead Shotgun Guy
class NTM_DeadShotgunGuy : NTM_DeadZombieman {
	Default {
		Health 30;
		Translation "NTM_Zombieman_Gray";
	}
}

// Dead Imp
class NTM_DeadImp : NTM_DeadMarine {
	Default {
		Health 60;
	}
	
	States {
		Spawn:
			NIMP P -1;
			Stop;
	}
}

// Dead Demon
class NTM_DeadDemon : NTM_DeadImp {
	Default {
		Health 100;
	}
	
	States {
		Spawn:
			NDEM M -1;
			Stop;
	}
}

// Dead Cacodemon
class NTM_DeadCacodemon : NTM_DeadImp {
	Default {
		Health 150;
		BloodColor "Blue";
	}
	
	States {
		Spawn:
			NCAC L -1;
			Stop;
	}
}

// Tech Lamp
class NTM_TechLamp : TechLamp {
	Default {
		Health 10;
		
		+DontCorpse
		+DontThrust
		+NoBlood
		+NoIceDeath
		+NotAutoaimed
		+Shootable
	}
	
	States {
		Spawn:
			NLMP ABCB 3 Bright;
			Loop;
		
		Death:
			NLMP D 0;
			Goto Broken;
		
		Broken:
			#### # -1 {
				AddZ(32);
				A_SpawnDebris("NTM_GlassShard", false, 1.5, 0.75);
				AddZ(-32);
				A_StartSound("NTM_World/glass");
				A_SetSize(-1, default.height);
			}
			
			Stop;
	}
}

// Tech Lamp 2
class NTM_TechLamp2 : NTM_TechLamp {
	Default {
		Height 60;
	}
	
	States {
		Spawn:
			NLMP EFGF 3 Bright;
			Loop;
		
		Death:
			NLMP H 0;
			Goto Broken;
	}
}

// Column
class NTM_Column : NTM_TechLamp {
	Default {
		Height 48;
	}
	
	States {
		Spawn:
			NLMP I -1 Bright;
			Stop;
		
		Death:
			NLMP J 0;
			Goto Broken;
	}
}

// Bloody Twitch
class NTM_BloodyTwitch : BloodyTwitch {
	States {
		Spawn:
			GOR1 ABAC 15;
			Loop;
	}
}

// Flames (DOOM 64 for DOOM II)
class NTM_Flames : NTM_FireProp {
	Default {
		XScale 0.75;
		YScale 0.6;
		Translation "NTM_Fire_Red";
		
		-NoInteraction
	}
}