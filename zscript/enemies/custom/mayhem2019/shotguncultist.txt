class NTM_ShotgunCultist : NTM_ShotgunGuy {
	bool justCrawled;
	
	Default {
		DamageFactor "NTM_CultistBullet", 0;
		SeeSound "NTM_Cultist/sight";
		ActiveSound "NTM_Cultist/active";
		PainSound "NTM_Cultist/pain";
		DeathSound "";
		NTM_Humanoid.BurnSound "NTM_Cultist/burn";
		Translation "NTM_Cultist_Brown";
		Tag "Shotgun Cultist";
		Obituary "%o was shot by a Shotgun Cultist.";
	}
	
	States {
		Spawn:
			NCUL N 10 A_Look;
			Loop;
		
		DukeSee:
			NCUL AABBCCDD 3 A_NTM_DukeChase;
			Loop;
		
		BloodSee:
			NCUL AABBCCDD 3 A_NTM_BloodChase;
			Loop;
		
		SWSee:
			NCUL A 1 A_NTM_SWChase;
			NCUL AA 1 A_NTM_SWChase2;
			NCUL A 1 A_NTM_SWChase;
			NCUL AA 1 A_NTM_SWChase2;
			NCUL B 1 A_NTM_SWChase;
			NCUL BB 1 A_NTM_SWChase2;
			NCUL B 1 A_NTM_SWChase;
			NCUL BB 1 A_NTM_SWChase2;
			NCUL C 1 A_NTM_SWChase;
			NCUL CC 1 A_NTM_SWChase2;
			NCUL C 1 A_NTM_SWChase;
			NCUL CC 1 A_NTM_SWChase2;
			NCUL D 1 A_NTM_SWChase;
			NCUL DD 1 A_NTM_SWChase2;
			NCUL D 1 A_NTM_SWChase;
			NCUL DD 1 A_NTM_SWChase2;
			Loop;
		
		Missile:
			NCUL E 10 A_FaceTarget;
			
			NCUL F 6 Bright {
				A_StartSound("shotguy/attack", Chan_Weapon);
				A_CustomBulletAttack(22.5, 0, 3, Random(1, 5) * 3, "NTM_CultistPuff", 0, CBAF_NoRandom);
			}
			
			NCUL E 14;
			Goto See;
		
		Pain:
			NCUL G 0 A_Jump(25, 2);
			NCUL G 6 A_Pain;
			Goto See;
			NCUL G 0 A_NTM_PainDisable;
			NCUL G 6 A_Pain;
			
			NCUL O 0 {
				if (sv_ntm_enemyMove == 1) {
					AddZ(13.25, false);
				}
				
				A_SetSize(-1, 30);
			}
			
			Goto Crawl;
		
		Crawl:
			NCUL O 0 {
				if (justCrawled && Random(0, 256) < 96) {
					A_SetSize(-1, 56, true);
					
					if (height == 56) {
						justCrawled = false;
						A_NTM_PainEnable();
						SetStateLabel("See");
						
						return;
					}
				}
				
				justCrawled = true;
				
				switch (sv_ntm_enemyMove) {
					case 0:
						SetStateLabel("DukeCrawl");
					break;
					
					case 1:
						SetStateLabel("BloodCrawl");
					break;
					
					case 2:
					default:
						SetStateLabel("SWCrawl");
					break;
				}
			}
			
			Loop;
		
		DukeCrawl:
			NCUL OOPPQQRR 3 A_NTM_DukeCrawl;
			Goto Crawl;
		
		BloodCrawl:
			NCUL OOPPQQRR 3 A_NTM_BloodCrawl;
			Goto Crawl;
		
		SWCrawl:
			NCUL O 1 A_NTM_SWCrawl;
			NCUL OO 1 A_NTM_SWCrawl2;
			NCUL O 1 A_NTM_SWCrawl;
			NCUL OO 1 A_NTM_SWCrawl2;
			NCUL P 1 A_NTM_SWCrawl;
			NCUL PP 1 A_NTM_SWCrawl2;
			NCUL P 1 A_NTM_SWCrawl;
			NCUL PP 1 A_NTM_SWCrawl2;
			NCUL Q 1 A_NTM_SWCrawl;
			NCUL QQ 1 A_NTM_SWCrawl2;
			NCUL Q 1 A_NTM_SWCrawl;
			NCUL QQ 1 A_NTM_SWCrawl2;
			NCUL R 1 A_NTM_SWCrawl;
			NCUL RR 1 A_NTM_SWCrawl2;
			NCUL R 1 A_NTM_SWCrawl;
			NCUL RR 1 A_NTM_SWCrawl2;
			Goto Crawl;
		
		Death:
		Death.Chainsaw:
			NCUL H 5 A_NTM_Death("NTM_Cultist/death1", "NTM_Cultist/death2", "NTM_Cultist/death3");
			NCUL I 6 A_NoBlocking;
			NCUL J 5;
			NCUL K 6;
			NCUL L -1 A_Jump(100, 1);
			Stop;
			NCUL L Random(30, 180);
			NCUL MLM 4;
			NCUL L -1;
			Stop;
		
		Raise:
			NCUL KJIH 5;
			Goto See;
	}
	
	void A_NTM_DukeCrawl() {
		speed *= 0.5;
		A_NTM_DukeChase(false, null, null);
		speed *= 2;
	}
	
	void A_NTM_BloodCrawl() {
		speed *= 0.5;
		A_NTM_BloodChase(false, null, null);
		speed *= 2;
	}
	
	void A_NTM_SWCrawl() {
		speed *= 0.5;
		A_NTM_SWChase(false, null, null);
		speed *= 2;
	}
	
	void A_NTM_SWCrawl2() {
		speed *= 0.5;
		A_NTM_SWChase2();
		speed *= 2;
	}
}

class NTM_CultistPuff : NTM_BulletPuff {
	Default {
		DamageType "NTM_CultistBullet";
	}
}